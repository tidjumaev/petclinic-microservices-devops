image: maven:3.3.9-jdk-8


cache:
  paths:
    - .m2/repository

# variables:
#   # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
#   # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
#   MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
#   # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
#   # when running from the command line.
#   # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
#   MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"




# before_script:
#   # Install JFrog CLI
#   -  curl -fL https://getcli.jfrog.io | sh
#   # Configure Artifactory instance with JFrog CLI
#   - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
#   - ./jfrog rt c show
#   # Set the M2_HOME environment variable
#   # Set the M2_HOME environment variable
#   - export M2_HOME=/usr/share/maven
#   # Replace the repository name in the configuration.yml to the correct one.
#   - sed -i 's,MAVEN_REPO_KEY,'"$MAVEN_REPO_KEY"',g' configuration.yml

# build:
#   script:
#     # Run the MVN command
#     - ./jfrog rt mvn "clean install" configuration.yml --build-name=gitlabci-maven-artifactory --build-number=$CI_JOB_ID
#     # Collect the environment variables
#     - ./jfrog rt bce gitlabci-maven-artifactory $CI_JOB_ID
#     # Pass the build information to Artifactory
#     - ./jfrog rt bp gitlabci-maven-artifactory $CI_JOB_ID
#   only:
#     - master

build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile

# test:
#   stage: test
#   script:
#     - mvn $MAVEN_CLI_OPTS test

# # For merge requests do not `deploy` but only run `verify`.
# # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# .verify: &verify
#   stage: test
#   script:
#     - 'mvn $MAVEN_CLI_OPTS verify'
#   except:
#     - master

# # Verify merge requests using JDK8
# verify:jdk8:
#   <<: *verify

# To deploy packages from CI, create a ci_settings.xml file
# For deploying packages to GitLab's Maven Repository: See https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for more details.
# Please note: The GitLab Maven Repository is currently only available in GitLab Premium / Ultimate.
# For `master` branch run `mvn deploy` automatically.
# deploy:jdk8:
#   stage: deploy
#   script:
#     - if [ ! -f ci_settings.xml ];
#         then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";
#       fi
#     - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
#   only:
#     - master

deploy:
  stage: deploy
  script:
    - if [ ! -f ci_settings.xml ];
        then echo "CI settings missing\! If deploying to GitLab Maven Repository, please see https://docs.gitlab.com/ee/user/project/packages/maven_repository.html#creating-maven-packages-with-gitlab-cicd for instructions.";
      fi
    - 'mvn $MAVEN_CLI_OPTS deploy -s ci_settings.xml'
  only:
    - master